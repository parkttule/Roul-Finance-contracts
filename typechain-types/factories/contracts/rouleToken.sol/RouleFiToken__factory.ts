/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  RouleFiToken,
  RouleFiTokenInterface,
} from "../../../contracts/rouleToken.sol/RouleFiToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "faucet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_roulefi",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506305f5e100600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107f6806100c96000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806340c10f191461005c57806370a08231146100785780639dc29fac146100a8578063c4d66de8146100c4578063de5f72fd146100e0575b600080fd5b6100766004803603810190610071919061053d565b6100ea565b005b610092600480360381019061008d919061057d565b6101d4565b60405161009f91906105b9565b60405180910390f35b6100c260048036038101906100bd919061053d565b61021d565b005b6100de60048036038101906100d9919061057d565b610389565b005b6100e861045b565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017190610631565b60405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101c99190610680565b925050819055505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a490610631565b60405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561032f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032690610700565b60405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461037e9190610720565b925050819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040e906107a0565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620186a0600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104d4826104a9565b9050919050565b6104e4816104c9565b81146104ef57600080fd5b50565b600081359050610501816104db565b92915050565b6000819050919050565b61051a81610507565b811461052557600080fd5b50565b60008135905061053781610511565b92915050565b60008060408385031215610554576105536104a4565b5b6000610562858286016104f2565b925050602061057385828601610528565b9150509250929050565b600060208284031215610593576105926104a4565b5b60006105a1848285016104f2565b91505092915050565b6105b381610507565b82525050565b60006020820190506105ce60008301846105aa565b92915050565b600082825260208201905092915050565b7f6e6f7420726f756c656669000000000000000000000000000000000000000000600082015250565b600061061b600b836105d4565b9150610626826105e5565b602082019050919050565b6000602082019050818103600083015261064a8161060e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061068b82610507565b915061069683610507565b92508282019050808211156106ae576106ad610651565b5b92915050565b7f6e6f7420656e6f75676820746f6b656e00000000000000000000000000000000600082015250565b60006106ea6010836105d4565b91506106f5826106b4565b602082019050919050565b60006020820190508181036000830152610719816106dd565b9050919050565b600061072b82610507565b915061073683610507565b925082820390508181111561074e5761074d610651565b5b92915050565b7f796f7572206e6f74206f776e6572000000000000000000000000000000000000600082015250565b600061078a600e836105d4565b915061079582610754565b602082019050919050565b600060208201905081810360008301526107b98161077d565b905091905056fea2646970667358221220cef80245a439bda54fbc006874edf59feece88db09ab3b6cc73d5ca50d343ea664736f6c63430008180033";

type RouleFiTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RouleFiTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RouleFiToken__factory extends ContractFactory {
  constructor(...args: RouleFiTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RouleFiToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RouleFiToken__factory {
    return super.connect(runner) as RouleFiToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouleFiTokenInterface {
    return new Interface(_abi) as RouleFiTokenInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RouleFiToken {
    return new Contract(address, _abi, runner) as unknown as RouleFiToken;
  }
}
